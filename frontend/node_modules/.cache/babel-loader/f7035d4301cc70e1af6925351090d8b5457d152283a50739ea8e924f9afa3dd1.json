{"ast":null,"code":"var _jsxFileName = \"D:\\\\Windows\\\\Web Apps\\\\visualize-it\\\\frontend\\\\src\\\\Components\\\\MapChart.js\",\n  _s = $RefreshSig$();\nimport * as topojson from \"topojson-client\";\nimport { geoPath, geoMercator } from \"d3-geo\";\nimport { select } from \"d3-selection\";\nimport { useEffect, useState } from \"react\";\nimport citiesData from \"./citiesData\"; // Assuming you import the data from a file or source\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapChart = ({\n  worldData,\n  citiesData\n}) => {\n  _s();\n  const [worldMap, setWorldMap] = useState([]);\n  useEffect(() => {\n    if (worldData && worldData.objects && worldData.objects.countries) {\n      const features = topojson.feature(worldData, worldData.objects.countries).features;\n      setWorldMap(features);\n    } else {\n      console.error(\"World data is not in the expected format:\", worldData);\n    }\n  }, [worldData]);\n  const projection = geoMercator().scale(150).translate([480, 250]);\n  const pathGenerator = geoPath().projection(projection);\n  const cityCoordinates = {\n    Plano: [-96.6989, 33.0198],\n    \"El Paso\": [-106.485, 31.7619],\n    Stockton: [-121.2908, 37.9577],\n    \"San Antonio\": [-98.4936, 29.4241],\n    \"St. Paul\": [-93.0898, 44.9537],\n    Oakland: [-122.2711, 37.8044],\n    Washington: [-77.0369, 38.9072],\n    Seattle: [-122.3321, 47.6062],\n    \"Kansas City\": [-94.5786, 39.0997],\n    \"Las Vegas\": [-115.1398, 36.1699],\n    Wichita: [-97.3301, 37.6872],\n    Houston: [-95.3698, 29.7604],\n    Dallas: [-96.797, 32.7767],\n    Hialeah: [-80.2781, 25.8576],\n    \"San Jose\": [-121.8863, 37.3382],\n    Cincinnati: [-84.512, 39.1031],\n    Laredo: [-99.5075, 27.5036]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"960\",\n      height: \"500\",\n      children: [worldMap.map((d, i) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: pathGenerator(d),\n        fill: `rgba(38,50,56,${1 / worldMap.length * i})`,\n        stroke: \"#FFFFFF\",\n        strokeWidth: 0.5\n      }, `path-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)), citiesData.map((city, i) => {\n        const coordinates = cityCoordinates[city._id];\n        if (coordinates) {\n          const [x, y] = projection(coordinates);\n          return /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: x,\n            cy: y,\n            r: Math.sqrt(city.count) * 2,\n            fill: \"rgba(255,0,0,0.6)\",\n            stroke: \"#FFFFFF\",\n            strokeWidth: 0.5,\n            children: /*#__PURE__*/_jsxDEV(\"title\", {\n              children: `${city._id}: ${city.count}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this)\n          }, `circle-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(MapChart, \"e5tTkfylOXLrWHSlR1T/lOiw/po=\");\n_c = MapChart;\nexport default MapChart;\nvar _c;\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"names":["topojson","geoPath","geoMercator","select","useEffect","useState","citiesData","jsxDEV","_jsxDEV","MapChart","worldData","_s","worldMap","setWorldMap","objects","countries","features","feature","console","error","projection","scale","translate","pathGenerator","cityCoordinates","Plano","Stockton","Oakland","Washington","Seattle","Wichita","Houston","Dallas","Hialeah","Cincinnati","Laredo","children","width","height","map","d","i","fill","length","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","city","coordinates","_id","x","y","cx","cy","r","Math","sqrt","count","_c","$RefreshReg$"],"sources":["D:/Windows/Web Apps/visualize-it/frontend/src/Components/MapChart.js"],"sourcesContent":["import * as topojson from \"topojson-client\";\r\nimport { geoPath, geoMercator } from \"d3-geo\";\r\nimport { select } from \"d3-selection\";\r\nimport { useEffect, useState } from \"react\";\r\nimport citiesData from \"./citiesData\"; // Assuming you import the data from a file or source\r\n\r\nconst MapChart = ({ worldData, citiesData }) => {\r\n  const [worldMap, setWorldMap] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (worldData && worldData.objects && worldData.objects.countries) {\r\n      const features = topojson.feature(\r\n        worldData,\r\n        worldData.objects.countries\r\n      ).features;\r\n      setWorldMap(features);\r\n    } else {\r\n      console.error(\"World data is not in the expected format:\", worldData);\r\n    }\r\n  }, [worldData]);\r\n\r\n  const projection = geoMercator().scale(150).translate([480, 250]);\r\n  const pathGenerator = geoPath().projection(projection);\r\n\r\n  const cityCoordinates = {\r\n    Plano: [-96.6989, 33.0198],\r\n    \"El Paso\": [-106.485, 31.7619],\r\n    Stockton: [-121.2908, 37.9577],\r\n    \"San Antonio\": [-98.4936, 29.4241],\r\n    \"St. Paul\": [-93.0898, 44.9537],\r\n    Oakland: [-122.2711, 37.8044],\r\n    Washington: [-77.0369, 38.9072],\r\n    Seattle: [-122.3321, 47.6062],\r\n    \"Kansas City\": [-94.5786, 39.0997],\r\n    \"Las Vegas\": [-115.1398, 36.1699],\r\n    Wichita: [-97.3301, 37.6872],\r\n    Houston: [-95.3698, 29.7604],\r\n    Dallas: [-96.797, 32.7767],\r\n    Hialeah: [-80.2781, 25.8576],\r\n    \"San Jose\": [-121.8863, 37.3382],\r\n    Cincinnati: [-84.512, 39.1031],\r\n    Laredo: [-99.5075, 27.5036],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <svg width=\"960\" height=\"500\">\r\n        {worldMap.map((d, i) => (\r\n          <path\r\n            key={`path-${i}`}\r\n            d={pathGenerator(d)}\r\n            fill={`rgba(38,50,56,${(1 / worldMap.length) * i})`}\r\n            stroke=\"#FFFFFF\"\r\n            strokeWidth={0.5}\r\n          />\r\n        ))}\r\n\r\n        {citiesData.map((city, i) => {\r\n          const coordinates = cityCoordinates[city._id];\r\n          if (coordinates) {\r\n            const [x, y] = projection(coordinates);\r\n            return (\r\n              <circle\r\n                key={`circle-${i}`}\r\n                cx={x}\r\n                cy={y}\r\n                r={Math.sqrt(city.count) * 2}\r\n                fill=\"rgba(255,0,0,0.6)\"\r\n                stroke=\"#FFFFFF\"\r\n                strokeWidth={0.5}\r\n              >\r\n                <title>{`${city._id}: ${city.count}`}</title>\r\n              </circle>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}