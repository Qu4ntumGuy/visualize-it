{"ast":null,"code":"var _jsxFileName = \"D:\\\\Windows\\\\Web Apps\\\\visualize-it\\\\frontend\\\\src\\\\Components\\\\MapChart.js\",\n  _s = $RefreshSig$();\nimport * as topojson from \"topojson-client\";\nimport { geoPath } from \"d3-geo\";\nimport { geoMercator } from \"d3-geo\";\nimport { select } from \"d3-selection\";\nimport { feature } from \"topojson-client\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapChart = ({\n  geoData\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetchSalesData();\n  }, []);\n  const fetchSalesData = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/api/geoDistribute`);\n      // console.log(response.data.data);\n      setData(response.data.data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    const svg = select(\"svg\");\n    const projection = geoMercator();\n    const pathGenerator = geoPath().projection(projection);\n    const worldMap = feature(geoData, geoData.objects.countries).features;\n    svg.selectAll(\"path\").data(worldMap).enter().append(\"path\").attr(\"class\", \"country\").attr(\"d\", d => pathGenerator(d)).style(\"stroke\", \"black\").style(\"fill\", \"lightgrey\");\n  }, [geoData]);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: 800,\n    height: 400,\n    viewBox: \"0 0 800 400\",\n    preserveAspectRatio: \"xMidYMid meet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(MapChart, \"MNW7rnkI9oNPb711ySWHHHkbM9Y=\");\n_c = MapChart;\nexport default MapChart;\nvar _c;\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"names":["topojson","geoPath","geoMercator","select","feature","useEffect","useState","axios","jsxDEV","_jsxDEV","MapChart","geoData","_s","data","setData","fetchSalesData","response","get","error","console","svg","projection","pathGenerator","worldMap","objects","countries","features","selectAll","enter","append","attr","d","style","width","height","viewBox","preserveAspectRatio","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Windows/Web Apps/visualize-it/frontend/src/Components/MapChart.js"],"sourcesContent":["import * as topojson from \"topojson-client\";\r\nimport { geoPath } from \"d3-geo\";\r\nimport { geoMercator } from \"d3-geo\";\r\nimport { select } from \"d3-selection\";\r\nimport { feature } from \"topojson-client\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst MapChart = ({ geoData }) => {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchSalesData();\r\n  }, []);\r\n\r\n  const fetchSalesData = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:8000/api/geoDistribute`\r\n      );\r\n      // console.log(response.data.data);\r\n      setData(response.data.data);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const svg = select(\"svg\");\r\n    const projection = geoMercator();\r\n    const pathGenerator = geoPath().projection(projection);\r\n\r\n    const worldMap = feature(geoData, geoData.objects.countries).features;\r\n\r\n    svg\r\n      .selectAll(\"path\")\r\n      .data(worldMap)\r\n      .enter()\r\n      .append(\"path\")\r\n      .attr(\"class\", \"country\")\r\n      .attr(\"d\", (d) => pathGenerator(d))\r\n      .style(\"stroke\", \"black\")\r\n      .style(\"fill\", \"lightgrey\");\r\n  }, [geoData]);\r\n\r\n  return (\r\n    <svg\r\n      width={800}\r\n      height={400}\r\n      viewBox=\"0 0 800 400\"\r\n      preserveAspectRatio=\"xMidYMid meet\"\r\n    ></svg>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n"],"mappings":";;AAAA,OAAO,KAAKA,QAAQ,MAAM,iBAAiB;AAC3C,SAASC,OAAO,QAAQ,QAAQ;AAChC,SAASC,WAAW,QAAQ,QAAQ;AACpC,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACdU,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAC9B,yCACF,CAAC;MACD;MACAH,OAAO,CAACE,QAAQ,CAACH,IAAI,CAACA,IAAI,CAAC;IAC7B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAEDb,SAAS,CAAC,MAAM;IACd,MAAMe,GAAG,GAAGjB,MAAM,CAAC,KAAK,CAAC;IACzB,MAAMkB,UAAU,GAAGnB,WAAW,CAAC,CAAC;IAChC,MAAMoB,aAAa,GAAGrB,OAAO,CAAC,CAAC,CAACoB,UAAU,CAACA,UAAU,CAAC;IAEtD,MAAME,QAAQ,GAAGnB,OAAO,CAACO,OAAO,EAAEA,OAAO,CAACa,OAAO,CAACC,SAAS,CAAC,CAACC,QAAQ;IAErEN,GAAG,CACAO,SAAS,CAAC,MAAM,CAAC,CACjBd,IAAI,CAACU,QAAQ,CAAC,CACdK,KAAK,CAAC,CAAC,CACPC,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBA,IAAI,CAAC,GAAG,EAAGC,CAAC,IAAKT,aAAa,CAACS,CAAC,CAAC,CAAC,CAClCC,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CACxBA,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;EAC/B,CAAC,EAAE,CAACrB,OAAO,CAAC,CAAC;EAEb,oBACEF,OAAA;IACEwB,KAAK,EAAE,GAAI;IACXC,MAAM,EAAE,GAAI;IACZC,OAAO,EAAC,aAAa;IACrBC,mBAAmB,EAAC;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEX,CAAC;AAAC5B,EAAA,CA7CIF,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AA+Cd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}