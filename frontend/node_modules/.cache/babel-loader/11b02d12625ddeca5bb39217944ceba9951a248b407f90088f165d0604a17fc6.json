{"ast":null,"code":"var _jsxFileName = \"D:\\\\Windows\\\\Web Apps\\\\visualize-it\\\\frontend\\\\src\\\\Components\\\\GrowthRate.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Chart from \"chart.js/auto\";\nimport axios from \"axios\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\n\n// Register the necessary components with Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst GrowthRate = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  const fetchGrowthRateData = async () => {\n    axios.get(\"/api/sales-growth-rate\").then(response => {\n      const data = response.data;\n      const labels = data.map(item => `${item._id.year}-${item._id.month || item._id.quarter}`);\n      const growthRates = data.map(item => item.growthRate);\n      setChartData({\n        labels: labels,\n        datasets: [{\n          label: \"Sales Growth Rate\",\n          data: growthRates,\n          fill: false,\n          backgroundColor: \"rgba(75,192,192,0.4)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          tension: 0.1\n        }]\n      });\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n_s(GrowthRate, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = GrowthRate;\nexport default GrowthRate;\nvar _c;\n$RefreshReg$(_c, \"GrowthRate\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","axios","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","GrowthRate","_s","chartData","setChartData","fetchGrowthRateData","get","then","response","data","labels","map","item","_id","year","month","quarter","growthRates","growthRate","datasets","label","fill","backgroundColor","borderColor","tension","catch","error","console","fetchData","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Windows/Web Apps/visualize-it/frontend/src/Components/GrowthRate.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport Chart from \"chart.js/auto\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\n// Register the necessary components with Chart.js\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst GrowthRate = () => {\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  const fetchGrowthRateData = async () => {\r\n    axios\r\n      .get(\"/api/sales-growth-rate\")\r\n      .then((response) => {\r\n        const data = response.data;\r\n        const labels = data.map(\r\n          (item) => `${item._id.year}-${item._id.month || item._id.quarter}`\r\n        );\r\n        const growthRates = data.map((item) => item.growthRate);\r\n\r\n        setChartData({\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: \"Sales Growth Rate\",\r\n              data: growthRates,\r\n              fill: false,\r\n              backgroundColor: \"rgba(75,192,192,0.4)\",\r\n              borderColor: \"rgba(75,192,192,1)\",\r\n              tension: 0.1,\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .catch((error) => console.error(\"Error fetching data:\", error));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return <Line data={chartData} />;\r\n};\r\n\r\nexport default GrowthRate;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,KAAK,MAAM,OAAO;AACzB,SACED,KAAK,IAAIE,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;;AAEjB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAT,OAAO,CAACU,QAAQ,CACdT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,MAAMI,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9C,MAAMmB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtChB,KAAK,CACFiB,GAAG,CAAC,wBAAwB,CAAC,CAC7BC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAC1B,MAAMC,MAAM,GAAGD,IAAI,CAACE,GAAG,CACpBC,IAAI,IAAK,GAAGA,IAAI,CAACC,GAAG,CAACC,IAAI,IAAIF,IAAI,CAACC,GAAG,CAACE,KAAK,IAAIH,IAAI,CAACC,GAAG,CAACG,OAAO,EAClE,CAAC;MACD,MAAMC,WAAW,GAAGR,IAAI,CAACE,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACM,UAAU,CAAC;MAEvDd,YAAY,CAAC;QACXM,MAAM,EAAEA,MAAM;QACdS,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,mBAAmB;UAC1BX,IAAI,EAAEQ,WAAW;UACjBI,IAAI,EAAE,KAAK;UACXC,eAAe,EAAE,sBAAsB;UACvCC,WAAW,EAAE,oBAAoB;UACjCC,OAAO,EAAE;QACX,CAAC;MAEL,CAAC,CAAC;IACJ,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACnE,CAAC;EAEDzC,SAAS,CAAC,MAAM;IACd2C,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO7B,OAAA,CAACZ,IAAI;IAACsB,IAAI,EAAEN;EAAU;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;AAAC9B,EAAA,CAnCID,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AAqChB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}