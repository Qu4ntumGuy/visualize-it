{"ast":null,"code":"var _jsxFileName = \"D:\\\\Windows\\\\Web Apps\\\\visualize-it\\\\frontend\\\\src\\\\Components\\\\MapChart.js\",\n  _s = $RefreshSig$();\n// MapChart.js\nimport React, { useRef, useEffect } from \"react\";\nimport { Chart, registerables } from \"chart.js\";\nimport { ChoroplethChart } from \"chartjs-chart-geo\";\nimport { geoAlbersUsa } from \"chartjs-chart-geo\";\n\n// Register the necessary components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables, ChoroplethChart);\nconst MapChart = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    // Clean up previous chart instance if it exists\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n    const ctx = chartRef.current.getContext(\"2d\");\n    chartInstanceRef.current = new Chart(ctx, {\n      type: \"choropleth\",\n      data: {\n        datasets: [{\n          label: \"Customer Distribution\",\n          data: data.map(d => ({\n            feature: d._id,\n            // Ensure _id matches GeoJSON feature identifiers\n            value: d.count\n          })),\n          backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: true,\n            position: \"top\"\n          }\n        },\n        geo: {\n          projection: geoAlbersUsa()\n        }\n      }\n    });\n\n    // Cleanup function\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    id: \"map-chart-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 10\n  }, this);\n};\n_s(MapChart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = MapChart;\nexport default MapChart;\nvar _c;\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"names":["React","useRef","useEffect","Chart","registerables","ChoroplethChart","geoAlbersUsa","jsxDEV","_jsxDEV","register","MapChart","data","_s","chartRef","chartInstanceRef","current","destroy","ctx","getContext","type","datasets","label","map","d","feature","_id","value","count","backgroundColor","borderColor","borderWidth","options","plugins","legend","display","position","geo","projection","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Windows/Web Apps/visualize-it/frontend/src/Components/MapChart.js"],"sourcesContent":["// MapChart.js\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport { ChoroplethChart } from \"chartjs-chart-geo\";\r\nimport { geoAlbersUsa } from \"chartjs-chart-geo\";\r\n\r\n// Register the necessary components\r\nChart.register(...registerables, ChoroplethChart);\r\n\r\nconst MapChart = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Clean up previous chart instance if it exists\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy();\r\n    }\r\n\r\n    const ctx = chartRef.current.getContext(\"2d\");\r\n    chartInstanceRef.current = new Chart(ctx, {\r\n      type: \"choropleth\",\r\n      data: {\r\n        datasets: [\r\n          {\r\n            label: \"Customer Distribution\",\r\n            data: data.map((d) => ({\r\n              feature: d._id, // Ensure _id matches GeoJSON feature identifiers\r\n              value: d.count,\r\n            })),\r\n            backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n            borderColor: \"rgba(75, 192, 192, 1)\",\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            position: \"top\",\r\n          },\r\n        },\r\n        geo: {\r\n          projection: geoAlbersUsa(),\r\n        },\r\n      },\r\n    });\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.destroy();\r\n      }\r\n    };\r\n  }, [data]);\r\n\r\n  return <canvas ref={chartRef} id=\"map-chart-canvas\" />;\r\n};\r\n\r\nexport default MapChart;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAC/C,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,YAAY,QAAQ,mBAAmB;;AAEhD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAL,KAAK,CAACM,QAAQ,CAAC,GAAGL,aAAa,EAAEC,eAAe,CAAC;AAEjD,MAAMK,QAAQ,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMa,gBAAgB,GAAGb,MAAM,CAAC,IAAI,CAAC;EAErCC,SAAS,CAAC,MAAM;IACd;IACA,IAAIY,gBAAgB,CAACC,OAAO,EAAE;MAC5BD,gBAAgB,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;IACpC;IAEA,MAAMC,GAAG,GAAGJ,QAAQ,CAACE,OAAO,CAACG,UAAU,CAAC,IAAI,CAAC;IAC7CJ,gBAAgB,CAACC,OAAO,GAAG,IAAIZ,KAAK,CAACc,GAAG,EAAE;MACxCE,IAAI,EAAE,YAAY;MAClBR,IAAI,EAAE;QACJS,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,uBAAuB;UAC9BV,IAAI,EAAEA,IAAI,CAACW,GAAG,CAAEC,CAAC,KAAM;YACrBC,OAAO,EAAED,CAAC,CAACE,GAAG;YAAE;YAChBC,KAAK,EAAEH,CAAC,CAACI;UACX,CAAC,CAAC,CAAC;UACHC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,OAAO,EAAE,IAAI;YACbC,QAAQ,EAAE;UACZ;QACF,CAAC;QACDC,GAAG,EAAE;UACHC,UAAU,EAAE/B,YAAY,CAAC;QAC3B;MACF;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACX,IAAIQ,gBAAgB,CAACC,OAAO,EAAE;QAC5BD,gBAAgB,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;MACpC;IACF,CAAC;EACH,CAAC,EAAE,CAACL,IAAI,CAAC,CAAC;EAEV,oBAAOH,OAAA;IAAQ8B,GAAG,EAAEzB,QAAS;IAAC0B,EAAE,EAAC;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxD,CAAC;AAAC/B,EAAA,CAjDIF,QAAQ;AAAAkC,EAAA,GAARlC,QAAQ;AAmDd,eAAeA,QAAQ;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}