{"ast":null,"code":"var _jsxFileName = \"D:\\\\Windows\\\\Web Apps\\\\visualize-it\\\\frontend\\\\src\\\\Components\\\\MapChart.js\",\n  _s = $RefreshSig$();\n// MapChart.js\nimport React, { useRef, useEffect } from \"react\";\nimport { Chart, registerables } from \"chart.js\";\nimport { ChoroplethChart, ChartGeo } from \"chartjs-chart-geo\";\nimport { geoAlbersUsa } from \"chartjs-chart-geo\";\nimport { Tooltip } from \"chart.js\";\n\n// Register the necessary components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables, ChoroplethChart, Tooltip, ChartGeo);\nconst MapChart = async ({\n  data\n}) => {\n  _s();\n  const us = await fetch(\"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\").then(r => r.json());\n  const nation = ChartGeo.topojson.feature(us, us.objects.nation).features[0];\n  // individual states\n  const states = ChartGeo.topojson.feature(us, us.objects.states).features;\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    // Destroy the previous chart instance if it exists\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n\n    // Create a new chart instance\n    const ctx = chartRef.current.getContext(\"2d\");\n    chartInstanceRef.current = new Chart(ctx, {\n      type: \"choropleth\",\n      data: {\n        datasets: [{\n          label: \"Customer Distribution\",\n          data: data.map(d => ({\n            feature: d._id,\n            value: d.count\n          })),\n          backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1\n        }]\n      },\n      //   options: {\n      //     plugins: {\n      //       legend: {\n      //         display: true,\n      //         position: \"top\",\n      //       },\n      //       tooltip: {\n      //         callbacks: {\n      //           label: function (context) {\n      //             return `${context.label}: ${context.raw}`;\n      //           },\n      //         },\n      //       },\n      //     },\n      //     geo: {\n      //       projection: geoAlbersUsa(), // Use the corrected projection name\n      //     },\n      //   },\n      options: {\n        scales: {\n          projection: {\n            axis: \"x\",\n            projection: \"equalEarth\"\n          },\n          color: {\n            axis: \"x\",\n            quantize: 5,\n            legend: {\n              position: \"bottom-right\",\n              align: \"right\"\n            }\n          }\n        }\n      }\n    });\n\n    // Cleanup function to destroy the chart when the component is unmounted or data changes\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n    };\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    id: \"map-chart-canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n};\n_s(MapChart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = MapChart;\nexport default MapChart;\nvar _c;\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"names":["React","useRef","useEffect","Chart","registerables","ChoroplethChart","ChartGeo","geoAlbersUsa","Tooltip","jsxDEV","_jsxDEV","register","MapChart","data","_s","us","fetch","then","r","json","nation","topojson","feature","objects","features","states","chartRef","chartInstanceRef","current","destroy","ctx","getContext","type","datasets","label","map","d","_id","value","count","backgroundColor","borderColor","borderWidth","options","scales","projection","axis","color","quantize","legend","position","align","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Windows/Web Apps/visualize-it/frontend/src/Components/MapChart.js"],"sourcesContent":["// MapChart.js\r\nimport React, { useRef, useEffect } from \"react\";\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport { ChoroplethChart, ChartGeo } from \"chartjs-chart-geo\";\r\nimport { geoAlbersUsa } from \"chartjs-chart-geo\";\r\nimport { Tooltip } from \"chart.js\";\r\n\r\n// Register the necessary components\r\nChart.register(...registerables, ChoroplethChart, Tooltip, ChartGeo);\r\n\r\nconst MapChart = async ({ data }) => {\r\n  const us = await fetch(\r\n    \"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\"\r\n  ).then((r) => r.json());\r\n\r\n  const nation = ChartGeo.topojson.feature(us, us.objects.nation).features[0];\r\n  // individual states\r\n  const states = ChartGeo.topojson.feature(us, us.objects.states).features;\r\n\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Destroy the previous chart instance if it exists\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.destroy();\r\n    }\r\n\r\n    // Create a new chart instance\r\n    const ctx = chartRef.current.getContext(\"2d\");\r\n    chartInstanceRef.current = new Chart(ctx, {\r\n      type: \"choropleth\",\r\n      data: {\r\n        datasets: [\r\n          {\r\n            label: \"Customer Distribution\",\r\n            data: data.map((d) => ({\r\n              feature: d._id,\r\n              value: d.count,\r\n            })),\r\n            backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n            borderColor: \"rgba(75, 192, 192, 1)\",\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      //   options: {\r\n      //     plugins: {\r\n      //       legend: {\r\n      //         display: true,\r\n      //         position: \"top\",\r\n      //       },\r\n      //       tooltip: {\r\n      //         callbacks: {\r\n      //           label: function (context) {\r\n      //             return `${context.label}: ${context.raw}`;\r\n      //           },\r\n      //         },\r\n      //       },\r\n      //     },\r\n      //     geo: {\r\n      //       projection: geoAlbersUsa(), // Use the corrected projection name\r\n      //     },\r\n      //   },\r\n      options: {\r\n        scales: {\r\n          projection: {\r\n            axis: \"x\",\r\n            projection: \"equalEarth\",\r\n          },\r\n          color: {\r\n            axis: \"x\",\r\n            quantize: 5,\r\n            legend: {\r\n              position: \"bottom-right\",\r\n              align: \"right\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    // Cleanup function to destroy the chart when the component is unmounted or data changes\r\n    return () => {\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.destroy();\r\n      }\r\n    };\r\n  }, [data]);\r\n\r\n  return <canvas ref={chartRef} id=\"map-chart-canvas\" />;\r\n};\r\n\r\nexport default MapChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}