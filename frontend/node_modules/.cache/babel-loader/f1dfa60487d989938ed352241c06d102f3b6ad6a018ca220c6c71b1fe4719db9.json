{"ast":null,"code":"var _jsxFileName = \"D:\\\\Windows\\\\Web Apps\\\\visualize-it\\\\frontend\\\\src\\\\Components\\\\MapChart.js\";\nimport * as topojson from \"topojson-client\";\nimport { geoPath } from \"d3-geo\";\nimport { geoMercator } from \"d3-geo\";\nimport { select } from \"d3-selection\";\nimport { feature } from \"topojson-client\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapChart = ({\n  data\n}) => {\n  const svg = select(\"svg\");\n  const projection = geoMercator();\n  const pathGenerator = geoPath().projection(projection);\n  const worldMap = topojson.feature(data, data.objects.countries).features;\n  const geoData = {\n    labels: worldMap.map(item => item.properties.name),\n    datasets: [{\n      label: \"Customer Count\",\n      data: worldMap.map(item => item.properties.customerCount),\n      borderColor: \"rgba(75, 192, 192, 1)\",\n      backgroundColor: \"rgba(75, 192, 192, 0.3)\",\n      fill: true,\n      tension: 0.3\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n_c = MapChart;\nexport default MapChart;\nvar _c;\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"names":["topojson","geoPath","geoMercator","select","feature","useEffect","jsxDEV","_jsxDEV","MapChart","data","svg","projection","pathGenerator","worldMap","objects","countries","features","geoData","labels","map","item","properties","name","datasets","label","customerCount","borderColor","backgroundColor","fill","tension","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Windows/Web Apps/visualize-it/frontend/src/Components/MapChart.js"],"sourcesContent":["import * as topojson from \"topojson-client\";\r\nimport { geoPath } from \"d3-geo\";\r\nimport { geoMercator } from \"d3-geo\";\r\nimport { select } from \"d3-selection\";\r\nimport { feature } from \"topojson-client\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst MapChart = ({ data }) => {\r\n  const svg = select(\"svg\");\r\n  const projection = geoMercator();\r\n  const pathGenerator = geoPath().projection(projection);\r\n\r\n  const worldMap = topojson.feature(data, data.objects.countries).features;\r\n\r\n  const geoData = {\r\n    labels: worldMap.map((item) => item.properties.name),\r\n    datasets: [\r\n      {\r\n        label: \"Customer Count\",\r\n        data: worldMap.map((item) => item.properties.customerCount),\r\n        borderColor: \"rgba(75, 192, 192, 1)\",\r\n        backgroundColor: \"rgba(75, 192, 192, 0.3)\",\r\n        fill: true,\r\n        tension: 0.3,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return <div></div>;\r\n};\r\n\r\nexport default MapChart;\r\n"],"mappings":";AAAA,OAAO,KAAKA,QAAQ,MAAM,iBAAiB;AAC3C,SAASC,OAAO,QAAQ,QAAQ;AAChC,SAASC,WAAW,QAAQ,QAAQ;AACpC,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC7B,MAAMC,GAAG,GAAGP,MAAM,CAAC,KAAK,CAAC;EACzB,MAAMQ,UAAU,GAAGT,WAAW,CAAC,CAAC;EAChC,MAAMU,aAAa,GAAGX,OAAO,CAAC,CAAC,CAACU,UAAU,CAACA,UAAU,CAAC;EAEtD,MAAME,QAAQ,GAAGb,QAAQ,CAACI,OAAO,CAACK,IAAI,EAAEA,IAAI,CAACK,OAAO,CAACC,SAAS,CAAC,CAACC,QAAQ;EAExE,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAEL,QAAQ,CAACM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC;IACpDC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,gBAAgB;MACvBf,IAAI,EAAEI,QAAQ,CAACM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,UAAU,CAACI,aAAa,CAAC;MAC3DC,WAAW,EAAE,uBAAuB;MACpCC,eAAe,EAAE,yBAAyB;MAC1CC,IAAI,EAAE,IAAI;MACVC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;EAED,oBAAOtB,OAAA;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAU,CAAC;AACpB,CAAC;AAACC,EAAA,GAtBI1B,QAAQ;AAwBd,eAAeA,QAAQ;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}