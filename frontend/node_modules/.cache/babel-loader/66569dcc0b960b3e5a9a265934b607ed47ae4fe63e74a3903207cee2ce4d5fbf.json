{"ast":null,"code":"var _jsxFileName = \"D:\\\\Windows\\\\Web Apps\\\\visualize-it\\\\frontend\\\\src\\\\Components\\\\MapChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport { Chart, registerables } from \"chart.js\";\nimport { ChoroplethChart } from \"chartjs-chart-geo\";\nimport { geoAlbersUsA } from \"chartjs-chart-geo\";\nimport { Tooltip } from \"chart.js\";\n\n// Register the necessary components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables, ChoroplethChart, Tooltip);\nconst MapChart = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const ctx = chartRef.current.getContext(\"2d\");\n    new Chart(ctx, {\n      type: \"choropleth\",\n      data: {\n        datasets: [{\n          label: \"Customer Distribution\",\n          data: data.map(d => ({\n            feature: d._id,\n            value: d.count\n          })),\n          backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n          borderColor: \"rgba(75, 192, 192, 1)\",\n          borderWidth: 1\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: true,\n            position: \"top\"\n          },\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                return `${context.label}: ${context.raw}`;\n              }\n            }\n          }\n        },\n        geo: {\n          projection: geoAlbersUsA() // Use an appropriate projection\n        }\n      }\n    });\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n_s(MapChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = MapChart;\nexport default MapChart;\nvar _c;\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"names":["React","useRef","useEffect","Chart","registerables","ChoroplethChart","geoAlbersUsA","Tooltip","jsxDEV","_jsxDEV","register","MapChart","data","_s","chartRef","ctx","current","getContext","type","datasets","label","map","d","feature","_id","value","count","backgroundColor","borderColor","borderWidth","options","plugins","legend","display","position","tooltip","callbacks","context","raw","geo","projection","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Windows/Web Apps/visualize-it/frontend/src/Components/MapChart.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport { ChoroplethChart } from \"chartjs-chart-geo\";\r\nimport { geoAlbersUsA } from \"chartjs-chart-geo\";\r\nimport { Tooltip } from \"chart.js\";\r\n\r\n// Register the necessary components\r\nChart.register(...registerables, ChoroplethChart, Tooltip);\r\n\r\nconst MapChart = ({ data }) => {\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const ctx = chartRef.current.getContext(\"2d\");\r\n    new Chart(ctx, {\r\n      type: \"choropleth\",\r\n      data: {\r\n        datasets: [\r\n          {\r\n            label: \"Customer Distribution\",\r\n            data: data.map((d) => ({\r\n              feature: d._id,\r\n              value: d.count,\r\n            })),\r\n            backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n            borderColor: \"rgba(75, 192, 192, 1)\",\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            position: \"top\",\r\n          },\r\n          tooltip: {\r\n            callbacks: {\r\n              label: function (context) {\r\n                return `${context.label}: ${context.raw}`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n        geo: {\r\n          projection: geoAlbersUsA(), // Use an appropriate projection\r\n        },\r\n      },\r\n    });\r\n  }, [data]);\r\n\r\n  return <canvas ref={chartRef} />;\r\n};\r\n\r\nexport default MapChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAC/C,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,OAAO,QAAQ,UAAU;;AAElC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAN,KAAK,CAACO,QAAQ,CAAC,GAAGN,aAAa,EAAEC,eAAe,EAAEE,OAAO,CAAC;AAE1D,MAAMI,QAAQ,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGb,MAAM,CAAC,IAAI,CAAC;EAE7BC,SAAS,CAAC,MAAM;IACd,MAAMa,GAAG,GAAGD,QAAQ,CAACE,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAC7C,IAAId,KAAK,CAACY,GAAG,EAAE;MACbG,IAAI,EAAE,YAAY;MAClBN,IAAI,EAAE;QACJO,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,uBAAuB;UAC9BR,IAAI,EAAEA,IAAI,CAACS,GAAG,CAAEC,CAAC,KAAM;YACrBC,OAAO,EAAED,CAAC,CAACE,GAAG;YACdC,KAAK,EAAEH,CAAC,CAACI;UACX,CAAC,CAAC,CAAC;UACHC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;QACf,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,OAAO,EAAE,IAAI;YACbC,QAAQ,EAAE;UACZ,CAAC;UACDC,OAAO,EAAE;YACPC,SAAS,EAAE;cACThB,KAAK,EAAE,SAAAA,CAAUiB,OAAO,EAAE;gBACxB,OAAO,GAAGA,OAAO,CAACjB,KAAK,KAAKiB,OAAO,CAACC,GAAG,EAAE;cAC3C;YACF;UACF;QACF,CAAC;QACDC,GAAG,EAAE;UACHC,UAAU,EAAElC,YAAY,CAAC,CAAC,CAAE;QAC9B;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACM,IAAI,CAAC,CAAC;EAEV,oBAAOH,OAAA;IAAQgC,GAAG,EAAE3B;EAAS;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;AAAChC,EAAA,CA3CIF,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AA6Cd,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}